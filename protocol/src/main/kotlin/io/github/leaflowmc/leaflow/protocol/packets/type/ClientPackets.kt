@file:Suppress("unused")

package io.github.leaflowmc.leaflow.protocol.packets.type

import io.github.leaflowmc.leaflow.protocol.listener.client.ClientConfigurationPacketListener
import io.github.leaflowmc.leaflow.protocol.listener.client.ClientLoginPacketListener
import io.github.leaflowmc.leaflow.protocol.listener.client.ClientPlayPacketListener
import io.github.leaflowmc.leaflow.protocol.listener.client.ClientStatusPacketListener
import io.github.leaflowmc.leaflow.protocol.packets.ClientPacket
import io.github.leaflowmc.leaflow.protocol.packets.login.ClientboundEncryptionRequestPacket
import io.github.leaflowmc.leaflow.protocol.packets.login.ClientboundLoginSuccessPacket
import io.github.leaflowmc.leaflow.protocol.packets.ping.ClientboundStatusPongResponsePacket
import io.github.leaflowmc.leaflow.protocol.packets.status.ClientboundStatusResponsePacket

object ClientStatusPackets : ProtocolInfo<ClientStatusPacketListener, ClientPacket<ClientStatusPacketListener, *>>() {
    val STATUS_RESPONSE = addPacket(ClientboundStatusResponsePacket.serializer())
    val PONG_RESPONSE = addPacket(ClientboundStatusPongResponsePacket.serializer())
}

object ClientLoginPackets : ProtocolInfo<ClientLoginPacketListener, ClientPacket<ClientLoginPacketListener, *>>() {
    val DISCONNECT = skipPacket()
    val ENCRYPTION_REQUEST = addPacket(ClientboundEncryptionRequestPacket.serializer())
    val LOGIN_SUCCESS = addPacket(ClientboundLoginSuccessPacket.serializer())
    val SET_COMPRESSION = skipPacket()
    val LOGIN_PLUGIN_REQUEST = skipPacket()
    val COOKIE_REQUEST = skipPacket()
}

object ClientConfigurationPackets : ProtocolInfo<ClientConfigurationPacketListener, ClientPacket<ClientConfigurationPacketListener, *>>() {
    val COOKIE_REQUEST = skipPacket()
    val PLUGIN_MESSAGE = skipPacket()
    val DISCONNECT = skipPacket()
    val FINISH_CONFIGURATION = skipPacket()
    val KEEP_ALIVE = skipPacket()
    val PING = skipPacket()
    val RESET_CHAT = skipPacket()
    val REGISTRY_DATA = skipPacket()
    val REMOVE_RESOURCE_PACK = skipPacket()
    val ADD_RESOURCE_PACK = skipPacket()
    val STORE_COOKIE = skipPacket()
    val TRANSFER = skipPacket()
    val FEATURE_FLAGS = skipPacket()
    val UPDATE_TAGS = skipPacket()
    val KNOWN_PACKS = skipPacket()
    val CUSTOM_REPORT_DETAILS = skipPacket()
    val SERVER_LINKS = skipPacket()
    val CLEAR_DIALOG = skipPacket()
    val SHOW_DIALOG = skipPacket()
}

object ClientPlayPackets : ProtocolInfo<ClientPlayPacketListener, ClientPacket<ClientPlayPacketListener, *>>() {
    val BUNDLE_DELIMITER = skipPacket()
    val SPAWN_ENTITY = skipPacket()
    val Entity_Animation = skipPacket()
    val AWARD_STATISTICS = skipPacket()
    val ACKNOWLEDGE_BLOCK_CHANGE = skipPacket()
    val SET_BLOCK_DESTROY_STAGE = skipPacket()
    val BLOCK_ENTITY_DATA = skipPacket()
    val BLOCK_ACTION = skipPacket()
    val BLOCK_UPDATE = skipPacket()
    val BOSS_BAR = skipPacket()
    val CHANGE_DIFFICULTY = skipPacket()
    val CHUNK_BATCH_FINISHED = skipPacket()
    val CHUNK_BATCH_START = skipPacket()
    val CHUNK_BIOMES = skipPacket()
    val CLEAR_TITLES = skipPacket()
    val COMMAND_SUGGESTIONS_RESPONSE = skipPacket()
    val COMMANDS = skipPacket()
    val CLOSE_CONTAINER = skipPacket()
    val SET_CONTAINER_CONTENT = skipPacket()
    val SET_CONTAINER_PROPERTY = skipPacket()
    val SET_CONTAINER_SLOT = skipPacket()
    val COOKIE_REQUEST = skipPacket()
    val SET_COOLDOWN = skipPacket()
    val CHAT_SUGGESTIONS = skipPacket()
    val PLUGIN_MESSAGE = skipPacket()
    val DAMAGE_EVENT = skipPacket()
    val DEBUG_SAMPLE = skipPacket()
    val DELETE_MESSAGE = skipPacket()
    val DISCONNECT = skipPacket()
    val DISGUISED_CHAT_MESSAGE = skipPacket()
    val ENTITY_EVENT = skipPacket()
    val TELEPORT_ENTITY = skipPacket()
    val EXPLOSION = skipPacket()
    val UNLOAD_CHUNK = skipPacket()
    val GAME_EVENT = skipPacket()
    val OPEN_HORSE_SCREEN = skipPacket()
    val HURT_ANIMATION = skipPacket()
    val INITIALIZE_WORLD_BORDER = skipPacket()
    val KEEP_ALIVE = skipPacket()
    val CHUNK_DATA_AND_UPDATE_LIGHT = skipPacket()
    val WORLD_EVENT = skipPacket()
    val PARTICLE = skipPacket()
    val UPDATE_LIGHT = skipPacket()
    val LOGIN = skipPacket()
    val MAP_DATA = skipPacket()
    val MERCHANT_OFFERS = skipPacket()
    val UPDATE_ENTITY_POSITION = skipPacket()
    val UPDATE_ENTITY_POSITION_AND_ROTATION = skipPacket()
    val MOVE_MINECART_ALONG_TRACK = skipPacket()
    val UPDATE_ENTITY_ROTATION = skipPacket()
    val MOVE_VEHICLE = skipPacket()
    val OPEN_BOOK = skipPacket()
    val OPEN_SCREEN = skipPacket()
    val OPEN_SIGN_EDITOR = skipPacket()
    val PING = skipPacket()
    val PONG = skipPacket()
    val PLACE_GHOST_RECIPE = skipPacket()
    val PLAYER_ABILITIES = skipPacket()
    val PLAYER_CHAT_MESSAGE = skipPacket()
    val END_COMBAT = skipPacket()
    val ENTER_COMBAT = skipPacket()
    val COMBAT_DEATH = skipPacket()
    val PLAYER_INFO_REMOVE = skipPacket()
    val PLAYER_INFO_UPDATE = skipPacket()
    val LOOK_AT = skipPacket()
    val SYNCHRONIZE_PLAYER_POSITION = skipPacket()
    val PLAYER_ROTATION = skipPacket()
    val RECIPE_BOOK_ADD = skipPacket()
    val RECIPE_BOOK_REMOVE = skipPacket()
    val RECIPE_BOOK_SETTINGS = skipPacket()
    val REMOVE_ENTITIES = skipPacket()
    val REMOVE_ENTITY_EFFECT = skipPacket()
    val RESET_SCORE = skipPacket()
    val REMOVE_RESOURCE_PACK = skipPacket()
    val ADD_RESOURCE_PACK = skipPacket()
    val RESPAWN = skipPacket()
    val SET_HEAD_ROTATION = skipPacket()
    val UPDATE_SECTION_BLOCKS = skipPacket()
    val SELECT_ADVANCEMENTS_TAB = skipPacket()
    val SERVER_DATA = skipPacket()
    val SET_ACTION_BAR_TEXT = skipPacket()
    val SET_BORDER_CENTER = skipPacket()
    val SET_BORDER_LERP_SIZE = skipPacket()
    val SET_BORDER_SIZE = skipPacket()
    val SET_BORDER_WARNING_DELAY = skipPacket()
    val SET_BORDER_WARNING_DISTANCE = skipPacket()
    val SET_CAMERA = skipPacket()
    val SET_CENTER_CHUNK = skipPacket()
    val SET_RENDER_DISTANCE = skipPacket()
    val SET_CURSOR_ITEM = skipPacket()
    val SET_DEFAULT_SPAWN_POSITION = skipPacket()
    val DISPLAY_OBJECTIVE = skipPacket()
    val SET_ENTITY_METADATA = skipPacket()
    val LINK_ENTITIES = skipPacket()
    val SET_ENTITY_VELOCITY = skipPacket()
    val SET_EQUIPMENT = skipPacket()
    val SET_EXPERIENCE = skipPacket()
    val SET_HEALTH = skipPacket()
    val SET_HELD_ITEM = skipPacket()
    val UPDATE_OBJECTIVES = skipPacket()
    val SET_PASSENGERS = skipPacket()
    val SET_PLAYER_INVENTORY_SLOT = skipPacket()
    val UPDATE_TEAMS = skipPacket()
    val UPDATE_SCORE = skipPacket()
    val SET_SIMULATION_DISTANCE = skipPacket()
    val SET_SUBTITLE_TEXT = skipPacket()
    val UPDATE_TIME = skipPacket()
    val SET_TITLE_TEXT = skipPacket()
    val SET_TITLE_ANIMATION_TIMES = skipPacket()
    val ENTITY_SOUND_EFFECT = skipPacket()
    val SOUND_EFFECT = skipPacket()
    val START_CONFIGURATION = skipPacket()
    val STOP_SOUND = skipPacket()
    val STORE_COOKIE = skipPacket()
    val SYSTEM_CHAT_MESSAGE = skipPacket()
    val SET_TAB_LIST_HEADER_AND_FOOTER = skipPacket()
    val TAG_QUERY_RESPONSE = skipPacket()
    val PICKUP_ITEM = skipPacket()
    val SYNCHRONIZE_VEHICLE_POSITION = skipPacket()
    val TEST_INSTANCE_BLOCK_STATUS = skipPacket()
    val SET_TICKING_STATE = skipPacket()
    val STEP_TICK = skipPacket()
    val TRANSFER = skipPacket()
    val UPDATE_ADVANCEMENTS = skipPacket()
    val UPDATE_ATTRIBUTES = skipPacket()
    val ENTITY_EFFECT = skipPacket()
    val UPDATE_RECIPES = skipPacket()
    val UPDATE_TAGS = skipPacket()
    val PROJECTILE_POWER = skipPacket()
    val CUSTOM_REPORT_DETAILS = skipPacket()
    val SERVER_LINKS = skipPacket()
    val WAYPOINT = skipPacket()
    val CLEAR_DIALOG = skipPacket()
    val SHOW_DIALOG = skipPacket()
}
